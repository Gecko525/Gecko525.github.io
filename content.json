[{"title":"Navigator is deprecated and has been removed from this package.","slug":"react-native之navigator","date":"2017-05-08T16:00:00.000Z","updated":"2017-05-09T10:27:00.801Z","comments":true,"path":"2017/05/09/react-native之navigator/","link":"","permalink":"http://yoursite.com/2017/05/09/react-native之navigator/","excerpt":"React-Native 升级到0.44.0版本后，引用了 import { Navigator} from &apos;react-native&apos;; 会报错：Navigator is deprecated and has been removed from this package.","text":"React-Native 升级到0.44.0版本后，引用了 import { Navigator} from &apos;react-native&apos;; 会报错：Navigator is deprecated and has been removed from this package.通过查阅react-native中文网得知：从0.44版本开始，Navigator被从react native的核心组件库中剥离到了一个名为react-native-deprecated-custom-components的单独模块中。如果你需要继续使用Navigator，则需要先 npm i -S react-native-deprecated-custom-components 然后从这个模块中import，即 import { Navigator } from &apos;react-native-deprecated-custom-components&apos; 然后就可以像以前那样使用Navigator组件了。","categories":[],"tags":[]},{"title":"浏览器差异及兼容方法","slug":"浏览器差异及兼容方法","date":"2016-06-20T09:24:51.000Z","updated":"2017-05-18T13:27:08.729Z","comments":true,"path":"2016/06/20/浏览器差异及兼容方法/","link":"","permalink":"http://yoursite.com/2016/06/20/浏览器差异及兼容方法/","excerpt":"目前为止，各大浏览器对HTML标准和JS标准都还未统一。虽然已经有很多框架已经帮我们做好了兼容性处理，但作为一个开发人员，还是非常有必要了解HTML和JS在浏览器中的差异，这能够帮我们更快的解决问题，提高代码质量，编写更优秀，兼容性更好的代码。","text":"目前为止，各大浏览器对HTML标准和JS标准都还未统一。虽然已经有很多框架已经帮我们做好了兼容性处理，但作为一个开发人员，还是非常有必要了解HTML和JS在浏览器中的差异，这能够帮我们更快的解决问题，提高代码质量，编写更优秀，兼容性更好的代码。 HTML和CSS方面的差异 不同浏览器的标签默认的内边距和外边距不同问题表现：不加样式控制下，默认 margin和padding 差异较大解决方案：CSS里消除所有标签的默认边距碰到频率：100%备注：这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的css文件开头都会先清除各个标签的默认内外边距。 块属性标签float后，又有横行的 margin 情况下，在IE6显示margin比设置的大问题表现:常见症状是IE6中后面的一块被顶到下一行碰到频率：90%解决方案：在float 的标签样式控制中加入 display:inline; 将其转化为行内属性备注：我们最常用的就是div+css布局了，而div就是一个典型的块属性标签，横向布局的时候我们通常都是用div float实现的，横向的间距设置如果用 margin实现，这就是一个必然会碰到的兼容性问题。 设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度问题表现：IE6、7和遨游里这个标签的高度不受控制，超出自己设置的高度碰到频率：60%解决方案：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。备注：这种情况一般出现在我们设置小圆角背景的标签里。出现这个问题的原因是IE8之前的浏览器都会给标签一个最小默认的行高的高度。即使你的标签是空的，这个标签的高度还是会达到默认的行高。 行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug（类似第二种）问题表现：IE6里的间距比超过设置的间距碰到几率：20%解决方案：在display:block;后面加入 12display:inline;display:table; 备注：行内属性标签，为了设置宽高，我们需要设置 display:block;(除了input标签比较特殊)。在用float布局并有横向的 margin后，在IE6下，他就具有了块属性 float后的横向 margin的bug。不过因为它本身就是行内属性标签，所以我们再加上 display:inline 的话，它的高宽就不可设了。这时候我们还需要在 display:inline后面加入display:talbe。 图片默认有间距问题表现：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。碰到几率：20%解决方案：使用float属性为img布局备注：因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。 透明度的兼容css设置问题表现:IE这样写:alpha(opacity=50);,Firefox/Chrome这样写: opacity: 0.5; 光标手型问题表现：Firefox不支持hand，但IE支持pointer解决方案：统一使用cursor:pointer; JS方面的差异 window.eventFirefox、Chrome 没有 window.event对象,只有event对象,IE里只支持 window.event,而其他主流浏览器两者都支持,所以一般写成： 1function XX(e)&#123;e = e || event;&#125; 获取事件源IE用srcElement获取事件源，而 Firefox用target获取事件源以上两个兼容通常会这么写： 12var e = e||event;var el = e.srcTarget || e.srcElement; 自定义属性问题IE下，可以使用获取常规属性的方法来获取自定义属性如div.value 或 div[value]，也可以使用 getAttribute() 获取自定义属性；Firefox下，只能使用 getAttribute() 获取自定义属性。 innerText、innerHTMLIE支持innerText、innerHTML,Firefox不支持innerText，它支持textContent来实现innerText，不过textContent没有像innerText一样考虑元素的display方式，所以不完全与IE兼容。如果不用textContent，字符串里面不包含HTML代码也可以用innerHTML代替。 可以这样写: 12345if(document.all)&#123; document.getElementById(&apos;element&apos;).innerText = &quot;mytext&quot;; &#125; else&#123; document.getElementById(&apos;element&apos;).textContent = &quot;mytext&quot;; &#125; 窗口的位置IE、Chrome、Firefox：支持使用 12window.screenLeftwindow.screenTop IE8以上、Chrome、safari、Firefox：支持使用 12window.screenXwindow.screenY 兼容代码可以使用下面这段代码： 12var leftX = typeof window.screenLeft == &apos;number&apos; ? window.screenLeft : window.screenX;ver topY = typeof window.screenTop == &apos;number&apos; ? window.screenTop : window.screenY; 6. 窗口的大小Firefox、Chrome、IE9和safari: 12window.innerWidthwindow.innerHeight IE系列: 12document.body.clientWidthdocument.body.clientHeight 不是IE6： 12document.documentElement.clientWidthdocument.documentElement.clientHeight 兼容代码可以这样子写: 1234567891011var width = window.innerWidth;var height = window.innerHeight;if(typeof width != &apos;number&apos;)&#123; if(document.compatMode == &apos;CSS1Compat&apos;)&#123; width = document.documentElement.clientWidth; height = document.docuementElement.clientHeight;&#125;else&#123; width = document.body.clientWidth; height = document.body.clientHeight;&#125; Ajax请求 IE: 1var xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;) Firefox、Chrome： 1var xhr = new XMLHttpRequest() 访问元素的”class”“class”是JavaScript的一个保留字，在这两个浏览器中我们使用如下句法来访问“class”在IE中这样写： 12var myObject = document.getElementById(&quot;header&quot;); var myAttribute = myObject.getAttribute(&quot;className&quot;); 在Firefox中这样写： 12var myObject = document.getElementById(&quot;header&quot;); var myAttribute = myObject.getAttribute(&quot;class&quot;); 获取鼠标指针的位置 在IE中这样写： 123var myCursorPosition = [0, 0]; myCursorPosition[0] = event.clientX; myCursorPosition[1] = event.clientY; 在Firefox中这样写： 123var myCursorPosition = [0, 0]; myCursorPosition[0] = event.pageX; myCursorPosition[1] = event.pageY;","categories":[],"tags":[]},{"title":"如何实现div填充父容器的剩余宽度空间","slug":"如何实现div填充父容器的剩余宽度空间","date":"2016-04-10T10:45:19.000Z","updated":"2017-05-17T11:04:45.295Z","comments":true,"path":"2016/04/10/如何实现div填充父容器的剩余宽度空间/","link":"","permalink":"http://yoursite.com/2016/04/10/如何实现div填充父容器的剩余宽度空间/","excerpt":"前段时间因项目需要，出现了一个有点棘手的问题，那就是如何实现div填充父容器的剩余宽度空间。","text":"前段时间因项目需要，出现了一个有点棘手的问题，那就是如何实现div填充父容器的剩余宽度空间。下面给出一个奇技淫巧： &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;left&quot;&gt;固定宽度&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;自动填充宽度&lt;/div&gt; &lt;/div&gt; .box{ width: 500px; height: 250px; border: 2px solid #000; color: #fff; } .left{ width: 200px; height: 200px; background-color: red; float: left;//关键 } .right{ height:200px; background-color: blue; overflow: hidden;//关键 } 即左边盒子左浮float:left，右边盒子设置overflow:hidden;","categories":[],"tags":[]},{"title":"JavaScript之三大家族（offset/scroll/client）","slug":"js之三大家族","date":"2015-06-01T11:35:57.000Z","updated":"2017-05-09T03:16:25.934Z","comments":true,"path":"2015/06/01/js之三大家族/","link":"","permalink":"http://yoursite.com/2015/06/01/js之三大家族/","excerpt":"三大家族都是以DOM元素节点的属性形式存在的，都是为了获取元素节点更多的信息。 offset家族 只能取值，不能设置值 获取的结果是数值，不是字符 获取的时候不需要style","text":"三大家族都是以DOM元素节点的属性形式存在的，都是为了获取元素节点更多的信息。 offset家族 只能取值，不能设置值 获取的结果是数值，不是字符 获取的时候不需要style 网页可见区域宽： document.body.clientWidth; 网页可见区域高： document.body.clientHeight; 网页可见区域宽： document.body.offsetWidth (包括边线的宽); 网页可见区域高： document.body.offsetHeight (包括边线的宽); 网页正文全文宽： document.body.scrollWidth; 网页正文全文高： document.body.scrollHeight; 网页被卷去的高： document.body.scrollTop; 网页被卷去的左： document.body.scrollLeft; offsetWidth 和 offsetHeight 获取对象自身的宽度和高度 ，包括内容、边框和内边距，即：offsetWidth = width + border + padding 123div&#123; width: 300px; border-right:2px solid #ccc; padding:10px;&#125; 注意：和 div.style.width 的区别，其只能获取到行内的数值 offsetLeft 和 offsetTop 距离第一个有定位的父级盒子左边和上边的距离 父级盒子必须要有定位，如果没有，则最终以body为准！ offsetLeft 从父亲的padding开始算 父亲的border不算.即：从子盒子边框到定位父盒子边框的距离。 scroll家族基本概念 网页正文全文宽： document.body.scrollWidth; 网页正文全文高： document.body.scrollHeight; 网页被卷去的高： document.body.scrollTop; 网页被卷去的左： document.body.scrollLeft; 在实际开发中使用比较多的就是scrollTop，如下图： 处理scroll家族浏览器适配问题 ie9+ 和 最新浏览器 window.pageXOffset; （scrollLeft） window.pageYOffset; （scrollTop） Firefox浏览器 和 其他浏览器 document.documentElement.scrollTop; Chrome浏览器 和 没有声明 DTD document.body.scrollTop; 兼容写法 var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0; var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0; scrollTo(x,y) 把内容滚动到指定的坐标 格式：scrollTo(xpos,ypos) xpos 必需；要在窗口文档显示区左上角显示的文档的 x 坐标； ypos 必需；要在窗口文档显示区左上角显示的文档的 y 坐标 。 网页大部分都没有水平滚动条，所以，这个x 不太常用。 client家族###1.1 clientWidth和clientHeight 网页可见区域宽： document.body.clientWidth; 网页可见区域高： document.body.clientHeight; 1.2 clientLeft和clientTop clientLeft，clientTop 返回的是元素边框的borderWidth， 如果不指定一个边框或者不定位改元素，其值就为0 1.3 offset、client和scroll的区别分析 left和top分析： clientLeft: 左边边框的宽度；clientTop: 上边边框的宽度 offsetLeft: 当前元素距离有定位的父盒子左边的距离；offsetTop: 当前元素距离有定位的父盒子上边的距离 scrollLeft: 左边滚动的长度; scrollTop: 上边滚动的长度; width和height分析 clientWidth\\/Height: 内容 + 内边距 offsetWidth\\/Height: 内容 + 内边距 + 边框 scrollWidth\\/Height: 滚动内容的宽度和高度","categories":[],"tags":[]},{"title":"你好，博客！","slug":"你好，博客！","date":"2015-03-12T14:37:17.000Z","updated":"2017-05-09T03:06:19.213Z","comments":true,"path":"2015/03/12/你好，博客！/","link":"","permalink":"http://yoursite.com/2015/03/12/你好，博客！/","excerpt":"","text":"第一个博客这是我的第一个博客，以后要及时更新，哈哈哈！ 不积跬步,无以至千里;不积小流,无以成江海","categories":[],"tags":[]}]